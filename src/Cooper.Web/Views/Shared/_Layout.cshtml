@{
    var cs = ViewBag.Connections as IEnumerable<Cooper.Model.Accounts.AccountConnection>;
    var tasklists = ViewBag.Tasklists as IEnumerable<Cooper.Model.Tasks.PersonalTasklist>;
}
<!DOCTYPE html>
<html>
<head>
    <title>@ViewBag.Title @this.Suffix()</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link type="text/css" rel="Stylesheet" href="@Url.Content("~/content/bootstrap/css/bootstrap.min.css")" />
    <link type="text/css" rel="Stylesheet" href="@Url.Content("~/content/jquery/css/smoothness/jquery-ui-1.8.21.custom.css")" />
    <link type="text/css" rel="Stylesheet" href="@Url.Content("~/content/css/task.css")" />
</head>
<body>
    @RenderBody()
    <!--template common-->
    <div style="display: none">
        <div id="loading">
            <div class="progress progress-striped active" style="width: 250px; margin: auto;
                margin-top: 40px;">
                <div class="bar" style="width: 100%;">
                    loading...</div>
            </div>
        </div>
        <div id="tmp_detail_batch">
            <div class="region_detail" id="{id}">
                <div class="btn-toolbar">
                    <div class="btn-group pull-left">
                        <button id="isCompleted" class="btn_complete btn">
                            <i class="icon-check"></i>@this.Lang().complete
                        </button>
                    </div>
                    <div class="btn-group pull-right" data-toggle="buttons-radio">
                        <a class="btn dropdown-toggle" data-toggle="dropdown"><span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            <li><a onclick="share(this)"><i class="icon-share"></i> @this.Lang().share_to</a></li>
                        </ul>
                    </div>
                    <div style="clear: both; height: 5px">
                    </div>
                </div>
                <table class="detail">
                    <tbody>
                        <tr>
                            <td colspan="2" id="subject">
                            </td>
                        </tr>
                        <tr>
                            <td class="detail-item">
                                @this.Lang().priority
                            </td>
                            <td class="detail-content">
                                <div id="priority" class="btn-group" data-toggle="buttons-radio" title="@this.Lang().priority_title">
                                    <button class="btn" title="" priority="0">
                                        <i class="icon-time" priority="0"></i>
                                    </button>
                                    <button class="btn" title="" priority="1">
                                        <i class="icon-tag" priority="1"></i>
                                    </button>
                                    <button class="btn" title="" priority="2">
                                        <i class="icon-pause" priority="2"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td class="detail-item">
                                @this.Lang().duetime
                            </td>
                            <td class="detail-content">
                                <input id="dueTime" type="text" class="input-small" value="" />
                                <i class="icon-bell"></i>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <ul id="tmp_tasklist_item">
            <li><a class="changelist" id="{id}"><i class="icon-list"></i><span>{name}</span></a></li>
        </ul>
    </div>
    <!--sync box hide-->
    <div class="modal hide" id="syncModal">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">
                ×</button>
            <h3>
                @this.Lang().sync_to</h3>
        </div>
        <div class="modal-body">
            <ul class="nav nav-tabs nav-stacked">
                @foreach (var c in cs)
                {
                    <li><a>
                        <button class="btn btn_sync btn-info" 
                            type="button" 
                            data-loading-text="<i class='icon-refresh'></i> @this.Lang().sync_loading" 
                            data-complete-text="<i class='icon-random'></i> @this.Lang().sync_complete" 
                            id="@c.ID">
                            <i class="icon-random"></i>@this.Lang().sync
                        </button>
                        <code>@c.GetType().Name.ConnectionName()</code>
                        @c.Name
                    </a></li>
                }
            </ul>
            @if (cs.Count() == 0)
            { 
                <div class="alert alert-danger">
                    @this.Lang().do_not_have_connection_please @Html.ActionLink(this.Lang("add"), "Connection", "Account", null, null)</div>
            }
        </div>
        <div class="modal-footer">
        </div>
    </div>
    <!--tasklist box-->
    <div class="modal hide" id="tasklistModal">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">
                ×</button>
            <h3>
                @this.Lang().tasklist</h3>
        </div>
        <div class="modal-body">
            <form class="well form-search well">
            <div class="control-group">
                <input type="text" class="input-medium search-query" maxlength="50" placeholder="@this.Lang().tasklist" />
                <button type="button" class="btn btn-primary" onclick="doAddTasklist(this)">@this.Lang().add</button>
            </div>
            <hr />
            <div class="control-group" style="line-height: 30px">
                <div class="row show-grid">
                    @foreach (var l in tasklists)
                    {
                        <div class="span2" title="@l.Name">
                            <i class="icon-list"></i>
                            @l.Name.ShortString(10)
                        </div>
                    }
                </div>
            </div>
            </form>
        </div>
    </div>
    <!--share box-->
    <div class="modal hide" id="shareModal">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">
                ×</button>
            <h3>
                @this.Lang().share_to</h3>
        </div>
        <div class="modal-body">
            <form class="well form-search well">
                <div class="control-group">
                    <textarea id="share_title" style="width:80%; height:150px"></textarea>
                </div>
                <div class="control-group">
                    @{ Html.RenderPartial("ShareToRegion"); }
                </div>
            </form>
        </div>
    </div>
    @{ Html.RenderSettings(); }
    <script type="text/javascript" src="@Url.Content("~/scripts/task.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/scripts/task_common.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/scripts/task_priority.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/scripts/task_due.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/scripts/account.js")"></script>
    <script type="text/javascript">
        var ui_list_helper, ui_list_helper_priority, ui_list_helper_due;
        var isShowArchive = false; //是否显示归档区域
        var currentMode = byPriority; //当前列表模式，默认使用优先级列表模式
        var currentList = null; //当前任务表标识

        var timer;
        var idChanges = {};
        var preSorts = null;

        $(function () {

            resize();
            $(window).resize(resize);
            $(document).keydown(function (e) {
                if (e.keyCode != 8) return;
                if ($(e.target).is('body'))
                    return false;
            });

            $('.btn').tooltip({ placement: 'bottom', delay: 800 });

            $.ajaxSetup({
                cache: false,
                error: function (x, e) {
                    $('#error_lose_connect').fadeIn(500);
                    resetTimer();
                }
            });

            ui_list_helper_priority = create_UI_List_Priority();
            ui_list_helper_due = create_UI_List_Due();

            refreshTasklists();
            list('');

            $('.btn_sync').click(function () {
                var $e = $(this);
                if ($e.hasClass('disabled')) return;
                $e.button('loading');
                doSyncStart($e.attr('id'), function () { $e.button('complete'); });
            });
        });
        function resize() {
            $('.todolist_wrapper').height($(window).height() - 170);
            $('.span4').height($(window).height() - 30);
        }
        function getToday() {
            var t = new Date();
            return $.datepicker.parseDate('yy-mm-dd', t.getFullYear() + '-' + (t.getMonth() + 1) + '-' + t.getDate());
        }

        function appendTask() { ui_list_helper.appendTask(); }
        function toggleTasks() { ui_list_helper.toggleTasks(); }
        function deleteTask() { ui_list_helper.deleteTask(); }

        //撤销删除
        function cancelDelete() {
            ui_list_helper.cancelDelete();
            //UNDONE:重演设计未完成之前通过重新加载来解决恢复
            currentMode();
        }
        //继续删除
        function continueDelete() { ui_list_helper.continueDelete(); }

        function syncAccount() {
            $('#syncModal').modal('show');
        }

        function archiveTasks() { ui_list_helper.archiveTasks(); }
        function hideArchive() {
            isShowArchive = false;
            if (ui_list_helper == ui_list_helper_priority) byPriority();
        }
        function showArchive() {
            isShowArchive = true;
            if (ui_list_helper == ui_list_helper_priority) byPriority();
        }
        ///////////////////////////////////////////////////////////////////////////////////////
        function share(e) {
            $('#shareModal').modal('show');
            $('#share_title').val($(e).parents('div.region_detail').eq(0).find('input').val() + lang.share_description);
        }
        ///////////////////////////////////////////////////////////////////////////////////////
        //tasklist ui
        function refreshTasklists() {
            $('#tasklists .changelist').unbind().click(function () {
                list($(this).attr('id'));
            });
        }
        function list(id) {
            $('#tasklist_title').html($('#tasklists a.changelist[id=' + id + ']').find('span').html());
            currentMode(function () {
                currentList = id;
                var temp = parseInt(id);
                $('#tasklist_delete')[isNaN(temp) ? 'hide' : 'show']();
            }, function () {
                var temp = parseInt(id);
                if (isNaN(temp))
                    $('.flag_by').hide();
            });
        }
        function addTasklist(id, name) {
            var $e = $(render($('#tmp_tasklist_item').html(), { id: id }));
            $e.find('span').text(name);
            $('#tasklists').append($e);
            refreshTasklists();
        }
        function removeTasklist(i) {
            $('#tasklists a[id=' + i + ']').parent().remove();
        }
        function openTasklists() {
            $('#tasklistModal').modal('show');
        }
        function doAddTasklist(btn) {
            var $btn = $(btn);
            var val = $.trim($btn.prev().val());
            $btn.parent()[val == '' ? 'addClass' : 'removeClass']('error');
            if (val == '') return;

            $.post(url_tasklist_create, { name: val, type: 'personal' }, function (d) {
                debuger.info('new tasklist#' + d);
                $btn.prev().val('');
                $('#tasklistModal').modal('hide');
                addTasklist(d, val);
                list(d);
            });
        }
        function doRemoveTasklist() {
            if (!confirm(lang.confirm_delete_tasklist)) return;

            $.post(url_tasklist_delete, { id: currentList }, function () {
                debuger.info('remove tasklist#' + currentList);
                removeTasklist(currentList);
                list('');
            });
        }
        ////////////////////////////////////////////////////////////////////////////////////////
        //切换tab时将总是从server读取最新数据以及正确的索引信息
        //切换之间需要内存清理
        //b=是否加载完整列表（包含已完成的）
        function byPriority(fn1,fn2) {
            var b = isShowArchive;
            currentMode = byPriority;
            $el_wrapper_region.empty().append($('#loading').html());
            $el_wrapper_detail.empty();
            fixBeforeSyncOrReload();
            sync(function () {
                if (fn1) fn1();
                $.ajax({
                    url: b ? url_task_byPriority : url_task_byPriority_incompleted,
                    //任务表标识
                    data: { tasklistId: currentList },
                    type: 'POST',
                    dataType: 'json',
                    beforeSend: function () { $el_wrapper_region.empty().append($('#loading').html()); },
                    success: function (data) {
                        init(data.List, data.Sorts);
                        (ui_list_helper = ui_list_helper_priority).render(b);
                        fixAfterSyncOrReload(data.Editable);
                        $('.flag_by').hide();
                        $('.flag_by_priority').show();
                        if (fn2) fn2();
                    }
                });
            });
        }
        function byDueTime(fn1,fn2) {
            currentMode = byDueTime;
            $el_wrapper_region.empty().append($('#loading').html());
            $el_wrapper_detail.empty();
            fixBeforeSyncOrReload();
            sync(function () {
                if (fn1) fn1();
                $.ajax({
                    url: url_task_byDueTime,
                    //任务表标识
                    data: { tasklistId: currentList },
                    type: 'POST',
                    dataType: 'json',
                    beforeSend: function () { $el_wrapper_region.empty().append($('#loading').html()); },
                    success: function (data) {
                        init(data.List, data.Sorts);
                        (ui_list_helper = ui_list_helper_due).render();
                        fixAfterSyncOrReload(data.Editable);
                        $('.flag_by').hide();
                        if (fn2) fn2();
                    }
                });
            });
        }

        //同步执行一些额外的修正工作，主要针对缓冲数据以及模式切换时的全局变量
        function fixBeforeSyncOrReload() {
            if (!ui_list_helper) return;
            //由于此时缓冲的删除记录可能由于delete_timer而未被提交
            ui_list_helper.continueDelete();
        }
        function fixAfterSyncOrReload(e) {
            //全局变量
            preSorts = null;
            //设置是否编辑状态
            setEditable(e);
            //自动选中首行
            firstClick();
        }
        function setEditable(b) {
            ui_list_helper.setEditable(b);
            $('.flag_editable')[b ? 'show' : 'hide']();
        }
        function firstClick() {
            $el_wrapper_region.find('tr.row_task input').first().click();
        }
        ////////////////////////////////////////////////////////////////////////////////////////
        //TODO:增加网络异常修正逻辑
        function sync(fn) {
            if (timer)
                clearTimeout(timer);
            //从未初始化时
            if (!cached_tasks) {
                if (fn) fn();
                resetTimer();
                return;
            }
            //变更记录
            var arr = [];
            for (var i in cached_tasks)
                if (cached_tasks[i])
                    arr = $.merge(arr, cached_tasks[i].popChanges());
            //id修正 避免同步间隙间对新增记录的变更导致此次同步时被重复新增
            for (var i = 0; i < arr.length; i++) {
                if (idChanges[arr[i]['ID']] != undefined) {
                    var old = arr[i]['ID'];
                    arr[i]['ID'] = idChanges[old];
                    debuger.info('客户端id修正，' + old + '->' + arr[i]['ID']);
                }
            }
            //删除记录
            arr = $.merge(arr, changes_delete);
            changes_delete = [];
            //排序索引
            var idxs = [];
            for (var i in cached_idxs)
                idxs = $.merge(idxs, [{
                    'By': cached_idxs[i]['by'],
                    'Key': cached_idxs[i]['key'],
                    'Indexs': cached_idxs[i].getIndexs()
                }]);
            var sorts = $.toJSON(idxs);
            if (preSorts == null) {
                preSorts = sorts;
                debuger.debug('preSorts=sorts');
            }
            if (sorts != preSorts)
                debuger.info('将排序索引同步至Server', idxs);
            if (arr.length > 0)
                debuger.info('将变更同步至Server', arr);
            //没有任何变更
            if (sorts == preSorts && arr.length == 0) {
                if (fn) fn();
                resetTimer();
                return;
            }
            preSorts = sorts;
            //提交变更记录
            $.post(url_task_sync, {
                tasklistId: currentList,
                //变更列表
                changes: $.toJSON(arr),
                //排序/显示模式
                by: ui_list_helper.mode,
                //排序记录
                sorts: sorts
            }, function (data) {
                $('#error_lose_connect').fadeOut(500);
                //修正
                var corrects = data; //$.evalJSON(data);
                $.each(corrects, function (i, n) {
                    //修正id
                    cached_tasks[n['OldId']].setId(n['NewId']);
                    cached_tasks[n['NewId']] = cached_tasks[n['OldId']];
                    cached_tasks[n['OldId']] = null;
                    //HACK:协助修正batchdetail中的临时标识
                    ui_list_helper.repairBatchDetailId(n['OldId'], n['NewId']);
                    //需要记录id变更以用于客户端修正
                    idChanges[n['OldId']] = n['NewId'];
                    debuger.info('来自server的id修正处理，' + n['OldId'] + '->' + n['NewId'], n);
                });

                if (fn) fn();
                resetTimer();
            });
        }
        function resetTimer() {
            timer = setTimeout(sync, 2000);
        }
    </script>
    @RenderSection("Bottom", false)
</body>
</html>
